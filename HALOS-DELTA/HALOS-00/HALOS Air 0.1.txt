import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import os
import time
import json
import queue
import concurrent.futures
from datetime import datetime
import webbrowser
import stripe
import openai
from dotenv import load_dotenv
import jwt
from PIL import Image, ImageTk
import sv_ttk
import pyttsx3
import speech_recognition as sr
from vosk import Model, KaldiRecognizer
import sounddevice as sd
import urllib.request
import zipfile
import whisper
import numpy as np
import hashlib
import unittest
from typing import Optional, Dict, List, Callable

# Load environment variables
load_dotenv()

# Constants
VOSK_MODEL_URL = "https://alphacephei.com/vosk/models/vosk-model-en-us-0.22.zip"
VOSK_MODEL_SHA256 = "a1b2c3..."  # Replace with actual checksum
MODEL_DIR = "models"
ASSETS_DIR = "assets"

class ConfigValidator:
    REQUIRED_KEYS = ["OPENAI_KEY", "AUTH_SECRET", "STRIPE_KEY"]
    
    @classmethod
    def validate(cls):
        missing = [key for key in cls.REQUIRED_KEYS if not os.getenv(key)]
        if missing:
            raise ValueError(f"Missing required config: {', '.join(missing)}")
            
        if len(os.getenv("AUTH_SECRET", "")) < 32:
            raise ValueError("AUTH_SECRET must be at least 32 characters")

class AudioBuffer:
    def __init__(self, size_seconds=5, sample_rate=16000):
        self.buffer = np.zeros(size_seconds * sample_rate, dtype=np.float32)
        self.sample_rate = sample_rate
        self.size = size_seconds * sample_rate
        self.index = 0
        self.lock = threading.Lock()

    def add_data(self, indata):
        with self.lock:
            available = self.size - self.index
            if len(indata) <= available:
                self.buffer[self.index:self.index+len(indata)] = indata
                self.index += len(indata)
            else:
                remaining = len(indata) - available
                self.buffer[self.index:] = indata[:available]
                self.buffer[:remaining] = indata[available:]
                self.index = remaining

    def get_last(self, seconds):
        with self.lock:
            samples = seconds * self.sample_rate
            if samples > self.size:
                raise ValueError("Requested duration exceeds buffer size")
            
            if self.index >= samples:
                return self.buffer[self.index-samples:self.index]
            else:
                return np.concatenate((
                    self.buffer[self.size-(samples-self.index):],
                    self.buffer[:self.index]
                ))

    def clear(self):
        with self.lock:
            self.buffer.fill(0)
            self.index = 0

class WhisperModel:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.model = whisper.load_model("tiny")
        return cls._instance

class VoiceRecognition:
    def __init__(self):
        self.whisper = WhisperModel()
        self.vosk_model = None
        
    def load_vosk_model(self, model_path):
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"Model not found at {model_path}")
        self.vosk_model = Model(model_path)
        
    def detect_wake_word(self, audio_clip):
        audio = whisper.pad_or_trim(audio_clip)
        mel = whisper.log_mel_spectrogram(audio).to(self.whisper.model.device)
        result = whisper.decode(self.whisper.model, mel, 
                              whisper.DecodingOptions(fp16=False))
        return CONFIG["WAKE_WORD"] in result.text.lower()
    
    def transcribe_offline(self, audio_data):
        if not self.vosk_model:
            raise RuntimeError("Vosk model not loaded")
        rec = KaldiRecognizer(self.vosk_model, 16000)
        rec.AcceptWaveform(audio_data)
        result = json.loads(rec.FinalResult())
        return result.get("text", "")

class Command:
    def __init__(self, name: str, handler: Callable, description: str, aliases: Optional[List[str]] = None):
        self.name = name
        self.handler = handler
        self.description = description
        self.aliases = aliases or []

class CommandRegistry:
    def __init__(self):
        self.commands = {}
        
    def register(self, command: Command):
        self.commands[command.name.lower()] = command
        for alias in command.aliases:
            self.commands[alias.lower()] = command
            
    def dispatch(self, text: str) -> str:
        text = text.lower().strip()
        for cmd_name, command in self.commands.items():
            if cmd_name in text:
                return command.handler(text)
        return "Command not recognized"

class AudioService:
    def __init__(self):
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=2)
        self.audio_buffer = AudioBuffer()
        self.voice_recognition = VoiceRecognition()
        self.listening = False
        
    def start(self):
        if not self.listening:
            self.listening = True
            threading.Thread(target=self._run, daemon=True).start()
            
    def _run(self):
        def callback(indata, frames, time, status):
            self.audio_buffer.add_data(indata[:,0])
            
        with sd.InputStream(callback=callback, 
                          channels=1,
                          samplerate=16000,
                          blocksize=4096):
            while self.listening:
                time.sleep(0.1)
                if self._check_wake_word():
                    self._process_command()
                    
    def _check_wake_word(self):
        audio_clip = self.audio_buffer.get_last(3)
        future = self.executor.submit(
            self.voice_recognition.detect_wake_word, 
            audio_clip
        )
        return future.result(timeout=2)
    
    def _process_command(self):
        audio_clip = self.audio_buffer.get_last(5)
        text = self.voice_recognition.transcribe_offline(audio_clip.tobytes())
        if text:
            return text
        return ""

class HALOSApp:
    def __init__(self, root):
        ConfigValidator.validate()
        
        self.root = root
        self.root.title("HALOS AI Assistant")
        self.root.geometry("1200x800")
        sv_ttk.set_theme("dark")
        
        self._setup_directories()
        self._load_config()
        self._init_services()
        self._setup_ui()
        
    def _setup_directories(self):
        os.makedirs(MODEL_DIR, exist_ok=True)
        os.makedirs(ASSETS_DIR, exist_ok=True)
        
    def _load_config(self):
        self.config = {
            "stripe_key": os.getenv("STRIPE_KEY"),
            "openai_key": os.getenv("OPENAI_KEY"),
            "auth_secret": os.getenv("AUTH_SECRET"),
            "admin_pw": os.getenv("ADMIN_PW"),
            "wake_word": "halos",
            "vosk_model_path": os.path.join(MODEL_DIR, "vosk-model-en-us-0.22")
        }
        
        openai.api_key = self.config["openai_key"]
        stripe.api_key = self.config["stripe_key"]
        
    def _init_services(self):
        self.audio_service = AudioService()
        self.voice_recognition = VoiceRecognition()
        self._load_voice_model()
        
        self.command_registry = CommandRegistry()
        self._register_commands()
        
        self.tts_engine = pyttsx3.init()
        self.tts_engine.setProperty('rate', 150)
        
    def _load_voice_model(self):
        if not os.path.exists(self.config["vosk_model_path"]):
            self._download_vosk_model()
        self.voice_recognition.load_vosk_model(self.config["vosk_model_path"])
        
    def _download_vosk_model(self):
        zip_path = os.path.join(MODEL_DIR, "vosk-model.zip")
        
        def reporthook(count, block_size, total_size):
            percent = min(int(count * block_size * 100 / total_size), 100)
            print(f"\rDownloading: {percent}%", end="", flush=True)
            
        urllib.request.urlretrieve(VOSK_MODEL_URL, zip_path, reporthook)
        
        # Verify checksum
        with open(zip_path, 'rb') as f:
            sha256 = hashlib.sha256(f.read()).hexdigest()
        if sha256 != VOSK_MODEL_SHA256:
            os.remove(zip_path)
            raise ValueError("Downloaded model checksum mismatch")
            
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(MODEL_DIR)
        os.remove(zip_path)
        
    def _register_commands(self):
        self.command_registry.register(Command(
            name="time",
            handler=lambda _: self.get_time(),
            description="Get current time"
        ))
        
        self.command_registry.register(Command(
            name="date",
            handler=lambda _: self.get_date(),
            description="Get current date"
        ))
        
        self.command_registry.register(Command(
            name="open",
            handler=self._handle_open_command,
            description="Open a website",
            aliases=["launch"]
        ))
        
    def _handle_open_command(self, text):
        site = text.lower().replace("open", "").strip()
        if not site:
            return "Please specify a website"
        return self.open_website(f"https://{site}")
    
    def _setup_ui(self):
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        self._setup_header(main_frame)
        self._setup_notebook(main_frame)
        
    def _setup_header(self, parent):
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X)
        
        ttk.Label(header_frame, text="HALOS", font=("Helvetica", 24, "bold")).pack(side=tk.LEFT)
        
        self.auth_button = ttk.Button(header_frame, text="Login", command=self._toggle_auth)
        self.auth_button.pack(side=tk.RIGHT)
        
        self.voice_status = ttk.Label(header_frame, text="🔴 Offline")
        self.voice_status.pack(side=tk.RIGHT, padx=10)
        
    def _setup_notebook(self, parent):
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        self._setup_assistant_tab()
        self._setup_payments_tab()
        self._setup_system_tab()
        
    def _setup_assistant_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Assistant")
        
        # Chat display
        self.chat_display = scrolledtext.ScrolledText(tab, wrap=tk.WORD, state='disabled', height=20)
        self.chat_display.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Input frame
        input_frame = ttk.Frame(tab)
        input_frame.pack(fill=tk.X, pady=5)
        
        self.user_input = ttk.Entry(input_frame)
        self.user_input.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.user_input.bind("<Return>", lambda _: self.process_command())
        
        ttk.Button(input_frame, text="Send", command=self.process_command).pack(side=tk.RIGHT)
        
        # Voice button
        self.mic_img = ImageTk.PhotoImage(Image.open(os.path.join(ASSETS_DIR, "mic.png")))
        self.mic_button = ttk.Button(
            input_frame,
            image=self.mic_img,
            command=self.toggle_voice
        )
        self.mic_button.pack(side=tk.RIGHT, padx=5)
        
        # Quick actions
        quick_frame = ttk.Frame(tab)
        quick_frame.pack(fill=tk.X)
        
        actions = [
            ("Time", lambda: self.process_command("time")),
            ("Date", lambda: self.process_command("date")),
            ("Open Google", lambda: self.process_command("open google")),
            ("System Health", lambda: self.process_command("system health"))
        ]
        
        for text, cmd in actions:
            ttk.Button(quick_frame, text=text, command=cmd).pack(side=tk.LEFT, padx=2)
    
    def _setup_payments_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Payments")
        # Payment UI components here...
    
    def _setup_system_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="System")
        # System monitoring UI here...
    
    def toggle_voice(self):
        if not hasattr(self, 'audio_service'):
            return
            
        if self.audio_service.listening:
            self.audio_service.listening = False
            self.voice_status.config(text="🔴 Offline")
        else:
            self.audio_service.start()
            self.voice_status.config(text="🟢 Listening")
    
    def process_command(self, command=None):
        if command is None:
            command = self.user_input.get()
            self.user_input.delete(0, tk.END)
            
        self.display_message(f"You: {command}", "user")
        response = self.command_registry.dispatch(command)
        self.display_message(f"HALOS: {response}", "halos")
        self.speak(response)
    
    def display_message(self, message, sender):
        self.chat_display.config(state='normal')
        self.chat_display.insert(tk.END, message + "\n")
        self.chat_display.config(state='disabled')
        self.chat_display.see(tk.END)
    
    def speak(self, text):
        self.tts_engine.say(text)
        self.tts_engine.runAndWait()
    
    def get_time(self):
        return datetime.now().strftime("%H:%M:%S")
    
    def get_date(self):
        return datetime.now().strftime("%A, %B %d, %Y")
    
    def open_website(self, url):
        try:
            webbrowser.open(url)
            return f"Opening {url}"
        except Exception as e:
            return f"Error opening browser: {str(e)}"
    
    def start_services(self):
        self.audio_service.start()
        self.root.after(1000, self._update_status)
    
    def _update_status(self):
        self.root.after(1000, self._update_status)

def run_halos_cli():
    print("HALOS CLI Mode - Type commands or 'exit' to quit")
    dummy_app = type('DummyApp', (), {
        "open_website": lambda self, url: f"Opening {url}",
        "check_health": lambda self: "System is nominal"
    })()
    registry = CommandRegistry()
    while True:
        try:
            command = input("HALOS> ")
            if command.lower() in ("exit", "quit"):
                break
            print(registry.dispatch(command))
        except KeyboardInterrupt:
            print("\nExiting...")
            break
        except Exception as e:
            print(f"Error: {str(e)}")

if __name__ == "__main__":
    ConfigValidator.validate()
    
    if os.getenv("HEADLESS"):
        run_halos_cli()
    else:
        try:
            root = tk.Tk()
            app = HALOSApp(root)
            app.start_services()
            root.mainloop()
        except tk.TclError:
            print("GUI unavailable - falling back to CLI")
            run_halos_cli()
