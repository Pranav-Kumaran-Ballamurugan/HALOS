import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog, Canvas
import threading
import os
import time
import io
import base64
import json
import openai
import webbrowser
import pyttsx3
import whisper
import sounddevice as sd
import numpy as np
import hashlib
from datetime import datetime
from dotenv import load_dotenv
from PIL import Image
from sentence_transformers import SentenceTransformer
from transformers import pipeline
import matplotlib.pyplot as plt

load_dotenv()

class HALOSApp(tk.Tk):
def init(self):
super().init()
self.title("HALOS V6 - Fully Integrated AI Assistant")
self.geometry("1200x900")

python
Copy
Edit
      self.api_key = os.getenv("OPENAI_API_KEY")
      openai.api_key = self.api_key

      self.chat_history = []
      self.audio_buffer = []
      self.memory = []

      self.summarizer = pipeline("summarization")
      self.emotion_detector = pipeline("text-classification", model="finiteautomata/bertweet-base-emotion-analysis")
      self.tts = pyttsx3.init()
      self.whisper_model = whisper.load_model("base")
      self.embedding_model = SentenceTransformer("all-MiniLM-L6-v2")

      self.transactions = []

      self.setup_ui()
      self.listen_thread()

  def setup_ui(self):
      self.notebook = ttk.Notebook(self)
      self.notebook.pack(fill=tk.BOTH, expand=True)

      self.setup_assistant_tab()
      self.setup_drawing_tab()
      self.setup_security_tab()
      self.setup_finance_tab()

  def setup_assistant_tab(self):
      tab = ttk.Frame(self.notebook)
      self.notebook.add(tab, text="Assistant")

      self.chat_display = scrolledtext.ScrolledText(tab, wrap=tk.WORD, state='disabled', height=20)
      self.chat_display.pack(fill=tk.BOTH, expand=True, pady=5)

      input_frame = ttk.Frame(tab)
      input_frame.pack(fill=tk.X, pady=5)

      self.user_input = ttk.Entry(input_frame)
      self.user_input.pack(side=tk.LEFT, fill=tk.X, expand=True)
      self.user_input.bind("<Return>", self.process_command)

      ttk.Button(input_frame, text="Send", command=self.process_command).pack(side=tk.RIGHT)

  def process_command(self, event=None):
      command = self.user_input.get()
      self.user_input.delete(0, tk.END)
      self.display_message(f"You: {command}", "user")

      if command.lower().startswith("play "):
          search = command[5:].strip().replace(" ", "+")
          url = f"https://www.youtube.com/results?search_query={search}"
          webbrowser.open(url)
          self.display_message(f"HALOS: 🎵 Searching YouTube for: {command[5:].strip()}", "halos")
          return

      try:
          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[
                  {"role": "system", "content": "You're a helpful AI assistant."},
                  {"role": "user", "content": command}
              ]
          )
          reply = response.choices[0].message.content.strip()
          self.display_message(f"HALOS: {reply}", "halos")
          self.chat_history.append({"role": "user", "content": command})
          self.chat_history.append({"role": "assistant", "content": reply})
      except Exception as e:
          self.display_message(f"HALOS: Error: {str(e)}", "halos")

  def display_message(self, message, sender):
      self.chat_display.config(state='normal')
      self.chat_display.insert(tk.END, message + "\n")
      self.chat_display.config(state='disabled')
      self.chat_display.see(tk.END)

  def setup_drawing_tab(self):
      tab = ttk.Frame(self.notebook)
      self.notebook.add(tab, text="Drawing")

      self.canvas = Canvas(tab, bg='white', width=800, height=500)
      self.canvas.pack()
      self.canvas.bind("<B1-Motion>", self.draw)

      self.image_output = scrolledtext.ScrolledText(tab, height=10)
      self.image_output.pack(fill=tk.BOTH, expand=True)

      ttk.Button(tab, text="Analyze Drawing", command=self.analyze_drawing).pack()

  def draw(self, event):
      x, y = event.x, event.y
      self.canvas.create_oval(x, y, x+3, y+3, fill="black")

  def analyze_drawing(self):
      ps = self.canvas.postscript(colormode='color')
      img = Image.open(io.BytesIO(ps.encode('utf-8')))
      img.save("drawing.png")
      self.image_output.insert(tk.END, "Drawing saved for future analysis.\n")

  def setup_security_tab(self):
      tab = ttk.Frame(self.notebook)
      self.notebook.add(tab, text="Security")

      frame = ttk.LabelFrame(tab, text="Hash Cracker")
      frame.pack(fill=tk.X)

      ttk.Label(frame, text="Hash:").grid(row=0, column=0)
      self.hash_input = ttk.Entry(frame, width=70)
      self.hash_input.grid(row=0, column=1)

      ttk.Label(frame, text="Dict File:").grid(row=1, column=0)
      self.dict_file = ttk.Entry(frame, width=70)
      self.dict_file.grid(row=1, column=1)
      ttk.Button(frame, text="Browse", command=self.load_dict_file).grid(row=1, column=2)

      ttk.Button(frame, text="Crack Hash", command=self.crack_hash).grid(row=2, columnspan=3)
      self.hash_result = ttk.Label(frame, text="Result:")
      self.hash_result.grid(row=3, columnspan=3)

  def load_dict_file(self):
      path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
      self.dict_file.delete(0, tk.END)
      self.dict_file.insert(0, path)

  def crack_hash(self):
      hash_value = self.hash_input.get().strip()
      path = self.dict_file.get().strip()
      if not os.path.exists(path):
          self.hash_result.config(text="Result: File not found")
          return

      algo = self.detect_algorithm(hash_value)
      if not algo:
          self.hash_result.config(text="Result: Unknown hash algorithm")
          return

      with open(path, "r", encoding="utf-8") as f:
          for word in f:
              word = word.strip()
              h = getattr(hashlib, algo)(word.encode()).hexdigest()
              if h == hash_value:
                  self.hash_result.config(text=f"Result: {word}")
                  return

      self.hash_result.config(text="Result: Not found")

  def detect_algorithm(self, hash_str):
      length = len(hash_str)
      return {
          32: 'md5',
          40: 'sha1',
          64: 'sha256'
      }.get(length, None)

  def setup_finance_tab(self):
      tab = ttk.Frame(self.notebook)
      self.notebook.add(tab, text="Finance")

      ttk.Label(tab, text="Description:").grid(row=0, column=0)
      self.desc_entry = ttk.Entry(tab)
      self.desc_entry.grid(row=0, column=1)

      ttk.Label(tab, text="Amount:").grid(row=1, column=0)
      self.amount_entry = ttk.Entry(tab)
      self.amount_entry.grid(row=1, column=1)

      ttk.Button(tab, text="Add", command=self.add_transaction).grid(row=2, columnspan=2)
      ttk.Button(tab, text="Report", command=self.finance_report).grid(row=3, columnspan=2)

      self.finance_output = scrolledtext.ScrolledText(tab, height=15)
      self.finance_output.grid(row=4, columnspan=2)

  def add_transaction(self):
      desc = self.desc_entry.get()
      try:
          amt = float(self.amount_entry.get())
          self.transactions.append((desc, amt))
          self.finance_output.insert(tk.END, f"Added: {desc} - ${amt:.2f}\n")
      except ValueError:
          messagebox.showerror("Error", "Invalid amount")

  def finance_report(self):
      total = sum(amt for _, amt in self.transactions)
      summary = f"Total spent: ${total:.2f}\n"
      self.finance_output.insert(tk.END, "\n" + summary + "\n")

  def listen_thread(self):
      threading.Thread(target=self.listen_loop, daemon=True).start()

  def listen_loop(self):
      def callback(indata, frames, time, status):
          audio = indata[:, 0]
          audio = whisper.pad_or_trim(audio)
          mel = whisper.log_mel_spectrogram(audio).to(self.whisper_model.device)
          options = whisper.DecodingOptions(fp16=False)
          result = whisper.decode(self.whisper_model, mel, options)
          self.chat_history.append({"role": "user", "content": result.text})
          self.process_command_voice(result.text)

      with sd.InputStream(callback=callback, samplerate=16000, channels=1):
          sd.sleep(10000)

  def process_command_voice(self, text):
      self.display_message(f"[Voice Input] You: {text}", "user")
      self.process_command()  # reuse same logic
if name == "main":
app = HALOSApp()
app.mainloop()