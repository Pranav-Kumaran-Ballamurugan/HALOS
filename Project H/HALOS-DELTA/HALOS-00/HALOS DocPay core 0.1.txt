import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import os
import time
from datetime import datetime
import webbrowser
import stripe
import openai
from dotenv import load_dotenv
import jwt
from PIL import Image, ImageTk
import sv_ttk  # Modern theme

# Load environment variables
load_dotenv()

# Configuration
CONFIG = {
    "STRIPE_KEY": os.getenv("STRIPE_LIVE_KEY"),
    "OPENAI_KEY": os.getenv("OPENAI_API_KEY"),
    "AUTH_SECRET": os.getenv("AUTH_SECRET", "super-secret-key"),
    "ADMIN_PW": os.getenv("ADMIN_PW"),
    "GPT_MODEL": "gpt-4-turbo",
    "WATCHED_FILES": ["./code/*.py"]
}

# Initialize APIs
stripe.api_key = CONFIG["STRIPE_KEY"]
openai.api_key = CONFIG["OPENAI_KEY"]

class HALOSApp:
    def __init__(self, root):
        self.root = root
        self.root.title("HALOS AI Assistant")
        self.root.geometry("1000x700")
        sv_ttk.set_theme("dark")  # Modern dark theme
        
        # Authentication state
        self.authenticated = False
        self.auth_token = None
        
        # Create UI
        self.setup_ui()
        
        # Start background services
        self.start_services()
    
    def setup_ui(self):
        """Initialize all GUI components"""
        # Main container
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X)
        
        ttk.Label(header_frame, text="HALOS", font=("Helvetica", 24, "bold")).pack(side=tk.LEFT)
        self.auth_button = ttk.Button(header_frame, text="Login", command=self.toggle_auth)
        self.auth_button.pack(side=tk.RIGHT)
        
        # Tab control
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Assistant Tab
        self.setup_assistant_tab()
        
        # Payments Tab
        self.setup_payments_tab()
        
        # Code Fixer Tab
        self.setup_codefixer_tab()
        
        # System Tab
        self.setup_system_tab()
    
    def setup_assistant_tab(self):
        """Assistant chat interface"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Assistant")
        
        # Chat display
        self.chat_display = scrolledtext.ScrolledText(
            tab, wrap=tk.WORD, state='disabled', height=20
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Input area
        input_frame = ttk.Frame(tab)
        input_frame.pack(fill=tk.X, pady=5)
        
        self.user_input = ttk.Entry(input_frame)
        self.user_input.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.user_input.bind("<Return>", self.process_command)
        
        ttk.Button(
            input_frame, 
            text="Send", 
            command=self.process_command
        ).pack(side=tk.RIGHT)
        
        # Quick actions
        quick_frame = ttk.Frame(tab)
        quick_frame.pack(fill=tk.X)
        
        actions = [
            ("Time", self.get_time),
            ("Date", self.get_date),
            ("Open Google", lambda: self.open_website("https://google.com")),
            ("System Health", self.check_health)
        ]
        
        for text, cmd in actions:
            ttk.Button(quick_frame, text=text, command=cmd).pack(side=tk.LEFT, padx=2)
    
    def setup_payments_tab(self):
        """Stripe payment interface"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Payments")
        
        # Server control
        server_frame = ttk.LabelFrame(tab, text="Payment Server")
        server_frame.pack(fill=tk.X, pady=5)
        
        self.server_status = ttk.Label(server_frame, text="Status: Stopped")
        self.server_status.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            server_frame, 
            text="Start Server", 
            command=self.start_payment_server
        ).pack(side=tk.RIGHT)
        
        # Payment form
        form_frame = ttk.LabelFrame(tab, text="New Payment")
        form_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(form_frame, text="Amount:").grid(row=0, column=0, sticky=tk.W)
        self.amount_entry = ttk.Entry(form_frame)
        self.amount_entry.grid(row=0, column=1, sticky=tk.EW)
        
        ttk.Label(form_frame, text="Recipient:").grid(row=1, column=0, sticky=tk.W)
        self.recipient_entry = ttk.Entry(form_frame)
        self.recipient_entry.grid(row=1, column=1, sticky=tk.EW)
        
        form_frame.columnconfigure(1, weight=1)
        
        ttk.Button(
            form_frame, 
            text="Process Payment", 
            command=self.process_payment
        ).grid(row=2, columnspan=2, pady=5)
        
        # Transaction log
        ttk.Label(tab, text="Recent Transactions:").pack(anchor=tk.W)
        self.transaction_log = tk.Listbox(tab, height=10)
        self.transaction_log.pack(fill=tk.BOTH, expand=True)
    
    def setup_codefixer_tab(self):
        """Code fixing interface"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Code Fixer")
        
        # Control panel
        control_frame = ttk.Frame(tab)
        control_frame.pack(fill=tk.X, pady=5)
        
        self.fixer_status = ttk.Label(control_frame, text="Status: Inactive")
        self.fixer_status.pack(side=tk.LEFT)
        
        ttk.Button(
            control_frame, 
            text="Start Monitoring", 
            command=self.toggle_codefixer
        ).pack(side=tk.RIGHT)
        
        # Code display
        self.code_display = scrolledtext.ScrolledText(
            tab, wrap=tk.WORD, height=15
        )
        self.code_display.pack(fill=tk.BOTH, expand=True)
        
        # Fix controls
        fix_frame = ttk.Frame(tab)
        fix_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(
            fix_frame, 
            text="Get Fix", 
            command=self.get_code_fix
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            fix_frame, 
            text="Apply Fix", 
            command=self.apply_code_fix
        ).pack(side=tk.RIGHT)
        
        # File browser
        file_frame = ttk.LabelFrame(tab, text="Watched Files")
        file_frame.pack(fill=tk.BOTH, expand=True)
        
        self.file_list = tk.Listbox(file_frame)
        self.file_list.pack(fill=tk.BOTH, expand=True)
        
        for file in CONFIG["WATCHED_FILES"]:
            self.file_list.insert(tk.END, file)
    
    def setup_system_tab(self):
        """System information and controls"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="System")
        
        # Health status
        health_frame = ttk.LabelFrame(tab, text="System Health")
        health_frame.pack(fill=tk.X, pady=5)
        
        self.cpu_label = ttk.Label(health_frame, text="CPU: Checking...")
        self.cpu_label.pack(anchor=tk.W)
        
        self.mem_label = ttk.Label(health_frame, text="Memory: Checking...")
        self.mem_label.pack(anchor=tk.W)
        
        self.disk_label = ttk.Label(health_frame, text="Disk: Checking...")
        self.disk_label.pack(anchor=tk.W)
        
        # Log display
        log_frame = ttk.LabelFrame(tab, text="Event Log")
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.system_log = scrolledtext.ScrolledText(
            log_frame, wrap=tk.WORD, state='disabled'
        )
        self.system_log.pack(fill=tk.BOTH, expand=True)
    
    def start_services(self):
        """Start background services"""
        self.update_system_health()
        self.root.after(5000, self.update_system_health)
    
    def update_system_health(self):
        """Update system health metrics"""
        # Simulated health data (replace with real checks)
        self.cpu_label.config(text="CPU: 12%")
        self.mem_label.config(text="Memory: 4.2GB / 16GB")
        self.disk_label.config(text="Disk: 120GB / 500GB")
        self.root.after(5000, self.update_system_health)
    
    def toggle_auth(self):
        """Toggle authentication state"""
        if not self.authenticated:
            self.show_auth_dialog()
        else:
            self.authenticated = False
            self.auth_token = None
            self.auth_button.config(text="Login")
            self.log_event("User logged out")
    
    def show_auth_dialog(self):
        """Show authentication dialog"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Authentication")
        
        ttk.Label(dialog, text="Username:").grid(row=0, column=0, padx=5, pady=5)
        username_entry = ttk.Entry(dialog)
        username_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(dialog, text="Password:").grid(row=1, column=0, padx=5, pady=5)
        password_entry = ttk.Entry(dialog, show="*")
        password_entry.grid(row=1, column=1, padx=5, pady=5)
        
        def attempt_login():
            if (username_entry.get() == "admin" and 
                password_entry.get() == CONFIG["ADMIN_PW"]):
                self.authenticated = True
                self.auth_token = jwt.encode(
                    {"user": "admin", "exp": datetime.utcnow() + timedelta(hours=8)},
                    CONFIG["AUTH_SECRET"],
                    algorithm="HS256"
                )
                self.auth_button.config(text="Logout")
                self.log_event("Admin logged in")
                dialog.destroy()
            else:
                messagebox.showerror("Error", "Invalid credentials")
        
        ttk.Button(
            dialog, 
            text="Login", 
            command=attempt_login
        ).grid(row=2, columnspan=2, pady=10)
        
        dialog.transient(self.root)
        dialog.grab_set()
        self.root.wait_window(dialog)
    
    def process_command(self, event=None):
        """Process user command"""
        if not self.authenticated:
            messagebox.showwarning("Auth Required", "Please login first")
            return
        
        command = self.user_input.get()
        self.user_input.delete(0, tk.END)
        
        self.display_message(f"You: {command}", "user")
        
        # Process commands
        response = ""
        if "time" in command.lower():
            response = self.get_time()
        elif "date" in command.lower():
            response = self.get_date()
        elif "open" in command.lower():
            site = command.split("open")[-1].strip()
            response = self.open_website(f"https://{site}")
        elif "pay" in command.lower():
            try:
                parts = command.split("pay")[-1].strip().split("to")
                amount = float(parts[0].strip())
                recipient = parts[1].strip()
                response = self.process_payment(amount, recipient)
            except Exception as e:
                response = f"Payment error: {str(e)}"
        else:
            response = "I didn't understand that command"
        
        self.display_message(f"HALOS: {response}", "halos")
    
    def display_message(self, message, sender):
        """Display message in chat"""
        self.chat_display.config(state='normal')
        self.chat_display.insert(tk.END, message + "\n")
        self.chat_display.config(state='disabled')
        self.chat_display.see(tk.END)
    
    def get_time(self):
        """Return current time"""
        return datetime.now().strftime("%H:%M:%S")
    
    def get_date(self):
        """Return current date"""
        return datetime.now().strftime("%A, %B %d, %Y")
    
    def open_website(self, url):
        """Open website in browser"""
        try:
            webbrowser.open(url)
            return f"Opening {url}"
        except Exception as e:
            return f"Failed to open browser: {str(e)}"
    
    def check_health(self):
        """Check system health"""
        return "System status: All systems nominal"
    
    def start_payment_server(self):
        """Start payment server"""
        self.server_status.config(text="Status: Running")
        self.log_event("Payment server started")
    
    def process_payment(self, amount=None, recipient=None):
        """Process payment"""
        if not self.authenticated:
            messagebox.showwarning("Auth Required", "Please login first")
            return
        
        if amount is None:
            try:
                amount = float(self.amount_entry.get())
                recipient = self.recipient_entry.get()
            except ValueError:
                messagebox.showerror("Error", "Invalid amount")
                return
        
        try:
            # Real Stripe integration
            intent = stripe.PaymentIntent.create(
                amount=int(amount * 100),
                currency="usd",
                description=f"Payment to {recipient}"
            )
            
            self.transaction_log.insert(0, f"${amount:.2f} to {recipient} - {intent.id}")
            self.log_event(f"Processed payment: ${amount:.2f} to {recipient}")
            return f"Payment initiated: {intent.client_secret}"
        
        except stripe.error.StripeError as e:
            self.log_event(f"Payment failed: {str(e)}", "error")
            return f"Payment error: {str(e)}"
    
    def toggle_codefixer(self):
        """Toggle code fixer monitoring"""
        if self.fixer_status["text"] == "Status: Inactive":
            self.fixer_status.config(text="Status: Active")
            self.start_file_monitoring()
            self.log_event("Code fixer activated")
        else:
            self.fixer_status.config(text="Status: Inactive")
            self.stop_file_monitoring()
            self.log_event("Code fixer deactivated")
    
    def start_file_monitoring(self):
        """Start watching files for changes"""
        # In a real implementation, use watchdog
        self.log_event("Started monitoring code files")
    
    def stop_file_monitoring(self):
        """Stop watching files"""
        self.log_event("Stopped monitoring code files")
    
    def get_code_fix(self):
        """Get AI code fix"""
        if not self.authenticated:
            messagebox.showwarning("Auth Required", "Please login first")
            return
        
        code = self.code_display.get("1.0", tk.END)
        if not code.strip():
            messagebox.showwarning("Error", "No code to analyze")
            return
        
        try:
            response = openai.ChatCompletion.create(
                model=CONFIG["GPT_MODEL"],
                messages=[
                    {"role": "system", "content": "Fix this Python code"},
                    {"role": "user", "content": code}
                ]
            )
            fix = response.choices[0].message.content
            self.code_display.delete("1.0", tk.END)
            self.code_display.insert("1.0", fix)
            self.log_event("Generated code fix")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to get fix: {str(e)}")
            self.log_event(f"Code fix error: {str(e)}", "error")
    
    def apply_code_fix(self):
        """Apply the current fix"""
        self.log_event("Applied code fix")
        messagebox.showinfo("Success", "Fix applied (simulated)")
    
    def log_event(self, message, level="info"):
        """Log system event"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.system_log.config(state='normal')
        self.system_log.insert(tk.END, f"[{timestamp}] {message}\n")
        self.system_log.config(state='disabled')
        self.system_log.see(tk.END)
        
        # Also print to console for debugging
        print(f"[{level.upper()}] {message}")

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = HALOSApp(root)
    root.mainloop()