import openai
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import traceback
import os

# Set your OpenAI API key here
openai.api_key = "your-api-key-here"

WATCHED_FILE = "test_code.py"  # The Python file you're editing

def is_python_file_valid(code):
    try:
        compile(code, "<string>", "exec")
        return True, None
    except Exception as e:
        return False, str(e)

def fix_code_with_gpt(code, error):
    print("üîß Sending code to GPT to fix...")
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful AI code assistant. Repair the code and only return fixed code."},
            {"role": "user", "content": f"The following code has an error:\n\n{code}\n\nThe error is:\n{error}\n\nPlease fix it:"}
        ],
        temperature=0.2,
        max_tokens=1000
    )
    return response['choices'][0]['message']['content']

class CodeFixerHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith(WATCHED_FILE):
            print(f"\nüìÑ Detected change in {WATCHED_FILE}")
            with open(WATCHED_FILE, "r", encoding="utf-8") as f:
                code = f.read()
            valid, error = is_python_file_valid(code)
            if not valid:
                print("‚ùå Code has error:", error)
                fixed_code = fix_code_with_gpt(code, error)
                backup_path = f"{WATCHED_FILE}.bak"
                os.rename(WATCHED_FILE, backup_path)
                with open(WATCHED_FILE, "w", encoding="utf-8") as f:
                    f.write(fixed_code)
                print(f"‚úÖ Fixed and saved. Original backed up at {backup_path}")
            else:
                print("‚úÖ No errors found.")

def start_monitoring():
    observer = Observer()
    event_handler = CodeFixerHandler()
    folder_to_watch = "."
    observer.schedule(event_handler, folder_to_watch, recursive=False)
    observer.start()
    print(f"üëÄ Monitoring changes in '{WATCHED_FILE}'...\n")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    start_monitoring()

